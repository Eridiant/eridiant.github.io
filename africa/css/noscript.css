.spotlights>section>.image:before{opacity:0!important}.spotlights>section>.content>.inner{transform:none!important;opacity:1!important}.wrapper>.inner{opacity:1!important;transform:none!important}#sidebar>.inner{opacity:1!important}#sidebar nav>ul>li{transform:none!important;opacity:1!important}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
